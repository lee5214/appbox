// mixins/_forms.scss Override
// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {
  // Color the label and help text
  .help-block,
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline,
  &.radio label,
  &.checkbox label,
  &.radio-inline label,
  &.checkbox-inline label  {
    color: $text-color;
  }
  // Set the border and box shadow on specific inputs to match
  .form-control {
    border-color: $border-color;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken($border-color, 10%);
 /*     $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);
      @include box-shadow($shadow); */
    }
  }
  // Set validation states also for addons
  .input-group-addon {
    color: $text-color;
    border-color: $border-color;
    background-color: $background-color;
  }
  // Optional feedback icon
  .form-control-feedback {
    color: $text-color;
  }
}


// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$input-border-focus` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus($color: $input-border-focus, $brand-primary: $input-bg-focus, $brand-warning: $input-font-color-focus) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus {
    background-color: $input-bg-focus;
    border-color: $color;
    color: $input-font-color-focus;
    outline: 0;
   /* @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba); */
  }
}

// Form control sizing
//
// Relative text size, padding, and border-radii changes for form controls. For
// horizontal sizing, wrap controls in the predefined grid classes. `<select>`
// element gets special love because it's special, and that's a fact!
// [converter] $parent hack
@mixin input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  #{$parent} {
    height: $input-height;
    padding: $padding-vertical $padding-horizontal;
    font-size: $font-size;
    line-height: $line-height;
    border-radius: $border-radius;
  }

  select#{$parent} {
    height: $input-height;
    line-height: $input-height;
  }

  textarea#{$parent},
  select[multiple]#{$parent} {
    height: auto;
  }
}

// mixins/_buttons.scss Override
@mixin button-variant-transparent($color, $background, $border) {
    color: $color;
    border-color: $border;
    background: transparent;

    &:focus,
    &.focus {
        color: $color;
        border-color: lighten($border, 25%);
        background: transparent;
    }
    &:hover {
        color: $color;
        border-color: darken($border, 4%);
        background: transparent;
    }
    &:active,
    &.active,
    .open > &.dropdown-toggle {
        color: $color;
        border-color: darken($border, 1%);
        background: transparent;
      &:hover,
      &:focus,
      &.focus {
        color: $color;
        border-color: lighten($border, 8%);
        background: transparent;
      }
    }
    &:active,
    &.active,
    .open > &.dropdown-toggle {
      background-image: none;
      background: rgba($brand-white, .07);
    }
    &.disabled,
    &[disabled],
    fieldset[disabled] & {
      &:hover,
      &:focus,
      &.focus {
        border-color: $border;
        background: transparent;
      }
    }

    .badge {
        color: $background;
        background-color: $color;
    }
}

@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:focus,
  &.focus {
    color: $color;
    background-color: lighten($background, 10%);
        border-color: lighten($border, 25%);
  }
  &:hover {
    color: $color;
    background-color: darken($background, 1%);
        border-color: darken($border, 4%);
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: lighten($background, 7%);
        border-color: darken($border, 1%);

    &:hover,
    &:focus,
    &.focus {
      color: $color;
      background-color: darken($background, 1%);
          border-color: lighten($border, 8%);
    }
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus,
    &.focus {
      background-color: $background;
          border-color: $border;
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}


